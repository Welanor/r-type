








Network Working Group                               H Morisset
Request for Comments:                               R-type-2015-moriss_h
Category: Standards Track                           Novembre 2014


                  Network Game Protocol (NGP) For R-Type

Status of This Memo

  This document specifies an Internet standards track protocol for
   the Internet community, and requests discussion and suggestions
   for improvements.  Please refer to the current edition of the
   "Internet Official Protocol Standards" (STD 1) for the
   standardization state and status of this protocol.  Distribution
   of this memo is unlimited.

Copyright Notice

   Copyright (C) Hugues Morisset.  All Rights Reserved.

Contact

   To contact the RFC Editor send an email message to:

              « moriss_h@epitech.eu ».
























R-type-2015-moriss_h        Informational                       [Page 2]

RFC 42                   Network Game Protocol             Novembre 2014

Table of Contents

   1. Introduction ....................................................2
      1.1 Conventions Used in This Document ...........................2
   2. Transfert Description ...........................................3
   3. Data Format .....................................................3
      3.1 Header ......................................................3
      3.2 Data ........................................................3
   4. Basics Command ..................................................4
      4.1 GetGame .....................................................4
      4.2 GetLvl ......................................................4
      4.3 Create ......................................................4
      4.4 Join ........................................................4
      4.5 Quit ........................................................4
      4.6 EndGame .....................................................4
      4.7 Start .......................................................4
   5. InGame Command ..................................................2
      5.1 PlayerLogin .................................................2
      5.2 Score .......................................................2
      5.3 GetMap ......................................................2
      5.4 PlayerLife ..................................................2
   6. Movement Command ................................................2
      6.1 Move ........................................................2
      6.2 UpdatePlayer ................................................2
      6.3 UpdateEnemy .................................................2
      6.4 UpdateBullet ................................................2
      6.5 NewBullet ...................................................2

1.  Introduction

   This protocol is intended to provide the game service,
   and be used between clients and servers on host computers.
   Typically the clients are on workstation hosts and the
   servers on mainframe hosts.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].













R-type-2015-moriss_h        Informational                       [Page 3]

RFC 42                    Network Game Protocol            Novembre 2014

2.  Transfert Description

   All the Data in this protocol MUST be provide by UDP socket.

3.  Data Format

   The Data MUST be format like:

                    +---------+-------------------+
                    | header  |        data       |
                    +---------+-------------------+
                    | 4 bytes |  size determined  |
                    |         |     in header     |
                    +---------+-------------------+

   The Data SHOULD have two component, a header  to recognize
   the command and the data of the command but the data who can
   be OPTIONAL.

3.1.  Header

           0       1       2       3       4
           +-------+-------+-------+-------+
           |  instruction  |     packet    |
           |     type      |      size     |
           +-------+-------+-------+-------+

    The header MUST have three component :

    - Instruction Type (2 Bytes):
      This is the an enum who give the action we need to provide.

    - Packet Size (2 Bytes):
      The size of the packet in the data section, not including the size of the headers.

3.2.  Data

   The Data is OPTIONAL
   The Data is an array of Bytes.
   The Data look like:

              0     1     2     3     4     5     6     7
              +-----+-----+-----+-----+-----+-----+-----+
              |               raw byte =                |
              |-----------------------------------------|
              | 0x00| 0x06| 'S' | 'A' | 'L' | 'U' | 'T' |
              +-----+-----+-----+-----+-----+-----+-----+









R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014

4. Basics Command

    The game group contains instruction to create delete and join
    and quit a game. It also send to Client the list of game in
    progress. The instruction Type MUST be one of the following :

    GETLISTGAME    :   0
    GETLVL         :   1
    CREATE         :   2
    JOIN           :   3
    QUIT           :   4
    ENDGAME        :   5
    START          :   6

4.1 GetListGame Instruction (0)

    4.1.1 Client to Server

    When the client wants to know the list of game in progress (being
    played but also on hold) he has to request the server by sending a
    packet containing a simple header and the GETLISTGAME instruction.
    The data unit SHOULD be empty. If not, the data MUST be ignored
    by the Server.

    For this instruction, the header will always look the same:

                 0        1        2        3        4
                 +--------+--------+--------+--------+
                 |     size =      |   instruction = |
                 |        0        |   GETLISTGAME   |
                 +--------+--------+--------+--------+

   And because the packet only contain a header (no data unit), the data
   size SHOULD always be zero.

   4.1.2 Server to Client

   When the Server responds to the Client, it will sends the almost
   exact header:
   Only the size changes. He also sends a data.

   If the Server has 0 game in progress, the data SHOULD be empty.
   Otherwise, the data contains datagrames.
   A datagame MUST contains :

   id_game	       2 bytes		Each game has an unique id
   login	         string		Login of the user who created this game
   game_name	     string		Name of the game
   lvl		         string		Level of the game
   player_max	     1 byte		Max number of player (MUST be from 1 to 4)
   observer        1 byte		MUST be set to 1 if the game accept client
                            that dont play the game but can watch it as
                            an observer. Else, MUST be set to 0.
   nb_player	     1 byte		Number of player that already joined the
                            game

R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014


    0     1     2    (3 strings X bytes)        N    N+1   N+2   N+3
    +-----+-----+                               +-----+-----+-----+
    |           |                               | pla-| obs-| nb  |
    |    game   |  - login - game_name - lvl -  | yer | erv-| pla-|
    |           |                               | max | er  | yer |
    +-----+-----+                               +-----+-----+-----+

    See (Section 3.2. Data) For more information on string type.
    with N = 2 + X

4.2 GetLvl Instruction (1)

    4.2.1 Client to Server

    When a Client wants to know the level available on the server
    he SHOULD send a GETLEVEL instruction from the GAME group.
    The Packet contains MUST a simple header without data and will
    always look the same.

               0        1        2        3        4
               +--------+--------+--------+--------+
               |     size =      |   instruction   |
               |        0        |      GETLVL     |
               +--------+--------+--------+--------+

4.3 Create Instruction (2)

    4.3.1 Client -> Server

    When a Client wants to create a game, he SHOULD send a Create
    Game Packet. This instruction MUST contains a Header and a Data.
    The Data MUST contains:

    login	      string	      Username the Client chose for the game
    game_name	  string	      Name of the game created by the client
    lvl		      string	      Game Level (MUST be one of the level
                              sent by the server after a GetLvl
                              instruction)
                              See (Section 4.2 GetLvl Instruction)
    player_max	1 byte	      Number of players accepted for the game
                              MUST be between 1 and 4.
    observer 	  1 byte	      MUST be set to 1 if the client accept
                              clients that will not play the game but be
                              able to watch it as an observer.
                              Else MUST be set to 0.









R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014

    4.3.2 Server -> Client

    The Servers MUST responds to the client with a header and a data.
    The data MUST contains :

    request_status	1 byte	Set to 0 if the request the client made
                            failed. On success is set to different
                            than 0.
    The data CAN contains after the reques_status:

    details (OPTIONAL)		string	details on why the request
                          failed.

    Events where the Client's request fails:

    Username already exist.
    Client has already created a game that is not finished.
    Name of the game already exist
    Game Lvl not supported / unknown by server
    Number of player accepted for the game is > 4
    Number of player accepted for the game is < 1
    Unknown format

    For instance, when a Client send a Create instruction and the
    instruction don't fail, the Server SHOULD sends:

                0      1      2      3      4      5
                +------+------+------+------+------+
                |           header          | data |
                |-------------|-------------|------|
                |    size     |  instruct   |status|
                |-------------|-------------|------|
                |      1      |  CREATE(2)  | OK(1)|
                +------+------+------+------+------+

4.4 Join Instruction (3)

    4.4.1 Client -> Server

    To Join a game the client SHOULD send a Join Instruction. This
    instruction MUST contains:

    login	    string		Username the client chose for himself
                        for the game.
    id_game	  2 bytes		The id of the game. MUST be an id
                        received from the response from the
                        Server to the GetGame Instruction.
    observer	1 byte		MUST be set to 1 if the client wants to play
                        the game, MUST be 0 if he only want to watch






R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014


    4.4.2 Server -> Client

    The Servers MUST responds to the client with a header and a data.
    The data contains :

    request_status	1 byte	Set to 0 if the request the client made
              failed. On success is set to different
        than 0.
    The data CAN contains after :
    details (OPTIONAL)	string	details on why the request
            failed.

    Events where the Client's request fails:

    Username already exist.
    Unknown Id Game
    Unknown format
    This Game don't accept observer.
    This Game is full.

4.5 Quit Instruction (4)

    This instruction only exist Client to Server.
    When a user properly quit, he MUST send a Quit instruction.
    This instruction MUST contains a Header but SHOULD NOT contain
    a data.

4.6 EndGame Instruction (5)

    This instruction only exist Server to Client.
    When The Lvl is finished or when all Players are dead, the
    Server MUST send a EndGame instruction.
    This instruction MUST contains a Header but SHOULD NOT contain
    a data.

4.7 Start Instruction (6)

    4.7.1 Client to Server

    To start the game the client MUST send a Start instruction.
    But before that he MUST has chosed his game parameters and sent
    it to the server with a Create instruction from the Game group and
    MUST has received a success message from server.

    This instruction MUST contains a header but SHOULD NOT contain
    a data.








R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014

    4.7.2 Server to Client

    The Servers MUST responds to the client with a header and a data.
    The data MUST contains :

    request_status	1 byte	Set to 0 if the request the client made
              failed. On success is set to different
        than 0.
    The data CAN contains after the request_status:
    details (OPTIONAL)		string	details on why the request
            failed.

    Events where the Client's request fails:

    The Client didn't successfully create a game
    The Client is not the one that created that game.

5.  InGame Command

    The GameDetail group's instructions Type MUST be one of the
    following:

    PLAYERLOGIN		 :	7
    SCORE		       :	8
    GETMAP		     :	9
    PLAYERLIFE		 :	10

5.1  PlayerLogin Instruction (7)

     5.1.1 Client to Server

     When the Client wants to know the username of the player
     of the game he SHOULD send a PlayerLogin instruction that
     SHOULD NOT contain data.

     5.1.2 Server to Client

     When the Server receive a PlayerLogin Instruction he MUST
     respond by sending a Header and a Data that MUST be empty
     in case of error. Otherwise he MUST send the Users Info in a list.
     A User Info MUST contains:

     nb_player	:	1 byte		The number of the player
     login	:	string		His username

     Events where the Client's request fails:

     The Client is not in a game.







R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014

5.2  Score Instruction (8)

     5.2.1 Client to Server

     When a Client wants to know the score of the player of the played
     game he MUST send a Score instruction. The score instruction
     MUST contain a header and SHOULD NOT contains data.

     5.2.0 Server to Client

     When the Server receive a Score instruction by a client playing
     a game he MUST responds to him by sending a Score Instruction
     header followed by a data that contains :

     player_nb		1 byte
     score		    2 bytes

     Repeated by the number of player in the game.
     If the Client is not in a game, the Server SHOULD ignore the
     message.

5.3.  GetMap Instruction (9)

     5.3.1 Client to Server

     When the Client wants the map of the game he joined he SHOULD send
     a Get Instruction from the MAP group. The data SHOULD be empty.

     5.3.2 Server to Client

     When the Server receives a Get Instruction from the Map group he
     MUST send a response.
     If the Client who sent the request for the map have not
     successfully joined a game the Server MUST send a Get instruction
     from the Game group without data. The size in the Header MUST be 0.

5.4  PlayerLife Instruction (10)


6.  Movement Command

    This group has a new Type: Position.
    Position is a 6 bytes data containing:

    tile position x	    :      1 bytes
    tile position y	    :      1 bytes
    position in tile x	:      1 bytes
    position in tile y	:      1 bytes
    direction x		      :      1 bytes
    direction y		      :      1 bytes

    direction y and direction x MUST be 0, 1 or -1 depending
    on the direction vector.


R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014


    A Element going down and foward(right) has a position with a
    direction x = 1 and a direction y = -1

            0      1      2      3      4      5      6
            +------+------+------+------+------+------+
            |                  position               |
            |-------------|-------------|--------------
            |    tile     | pos in tile |  direction  |
            |-------------|-------------|--------------
            |  x   |  y   |  x   |  y   |  x   |  y   |
            +------+------+------+------+------+------+

    The instruction number of this group MUST be one of the following:

    MOVE	        :	11
    UPDATEPLAYER  :	12
    UPDATEENEMY   :	13
    UPDATEBULLET  :	14
    NEWBULLET	    :	15

6.1 Move Instruction (11)

    This instruction only exist Client to Server.
    The client MUST send a header and a data containing
    a Position when he wants to change the position or
    direction of his R-Type.

    He MUST send the 8 bytes header followed by the 6 bytes data
    of position (described above)

6.2 UpdatePlayer Instruction (12)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the server when one or more player
    has changed their position. It contains a data composed of the id
    player and the data Position. Repeated by the
    number of client that changed their position or direction.
    The id player MUST be on 1 byte. The position is represented by
    a 6 bytes data (described above).

    For instance in a game played by two players 1 and 2, the Server
    MUST send a header followed by a 14 bytes data as bellow :

      0   1   2   3   4   5   6   7   8   9   10  11  12  13  14
      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+
      |id1|   position player1    |id2|   position player2    |
      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+







R-type-2015-moriss_h        Informational                       [Page 4]

RFC 42                    Network Game Protocol            Novembre 2014


6.3 UpdateEnemy Instruction (13)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the server. It contains a data
    composed of the id player and the data Position. Repeated by the
    number of client that changed their position or direction.
    The id player MUST be on 1 byte. The position is represented by
    a 6 bytes data (described above)

    The data of this instruction is the same as the UpdatePlayer
    Instruction, except that instead of sending the Client id,
    the enemy Id is sent.

6.4 UpdateBullet Instruction (14)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the Server to prevent the clients
    the new bullets position.
    The data sent MUST contains:

    typeBullet      2 bytes
    pos	        		6 bytes		Represented by the 6 bytes data
                              described above.

6.5 New Bullet Instruction (15)

    This instruction only exitst Client to Server.
    When a client launch a bullet, he MUST send to the server a
    New-Bullet Instruction containing the typeBullet on 2 bytes.

    the typeBullet is described above in Section 6.4.
